// Generated by CoffeeScript 1.10.0
(function(global) {
  var jQuery;
  jQuery = function() {
    var SVG_TAGS, doms;
    doms = this;
    this.text = function(str) {
      doms.each(function(dom) {
        dom.textContent = str;
      });
      return this;
    };
    this.html = function(str) {
      doms.each(function(dom) {
        dom.innerHTML = str;
      });
      return this;
    };
    this.style = function(name, value) {
      doms.each(function(dom) {
        var i, styleText, styles;
        styleText = dom.getAttribute('style');
        styles = {};
        if (styleText) {
          styleText.split(';').each(function(n) {
            var nv;
            nv = n.split(':');
            styles[nv[0]] = nv[1];
          });
        }
        styles[name] = value;
        styleText = '';
        for (i in styles) {
          styleText += i + ': ' + styles[i] + '; ';
        }
        dom.setAttribute('style', styleText);
      });
      return this;
    };
    this.hasClass = function(name) {
      var classText, classes, i;
      if (doms.length === 0) {
        return false;
      }
      i = 0;
      while (i < doms.length) {
        classText = doms[i].getAttribute('class') || '';
        classes = classText.split(RegExp(' +'));
        if (!classes.contains(name)) {
          return false;
        }
        i++;
      }
      return true;
    };
    this.toggleClass = function(name) {
      doms.each(function(dom) {
        var classText, classes;
        classText = dom.getAttribute('class') || '';
        classes = classText.split(RegExp(' +'));
        if (classes.contains(name)) {
          classes.remove(name);
        } else {
          classes.push(name);
        }
        if (classes.length > 0) {
          dom.setAttribute('class', classes.join(' '));
        } else {
          dom.removeAttribute('class');
        }
      });
      return this;
    };
    this.addClass = function(name) {
      doms.each(function(dom) {
        var classText, classes;
        classText = dom.getAttribute('class') || '';
        classes = classText.split(RegExp(' +'));
        if (!classes.contains(name)) {
          classes.push(name);
          dom.setAttribute('class', classes.join(' '));
        }
      });
      return this;
    };
    this.removeClass = function(name) {
      doms.each(function(dom) {
        var classText, classes;
        classText = dom.getAttribute('class') || '';
        classes = classText.split(RegExp(' +'));
        if (classes.contains(name)) {
          classes.remove(name);
          if (classes.length > 0) {
            dom.setAttribute('class', classes.join(' '));
          } else {
            dom.removeAttribute('class');
          }
        }
      });
      return this;
    };
    this.attr = function(name, value) {
      value = value || '';
      doms.each(function(dom) {
        dom.setAttribute(name, value);
      });
      return this;
    };
    this.hasAttr = function(name) {
      var i;
      if (doms.length === 0) {
        return false;
      }
      i = 0;
      while (i < doms.length) {
        if (!doms[i].hasAttribute(name)) {
          return false;
        }
        i++;
      }
      return true;
    };
    this.removeAttr = function(name) {
      doms.each(function(dom) {
        dom.removeAttribute(name);
      });
      return this;
    };
    SVG_TAGS = 'svg line rect circle ellipse polyline polygon path text';
    this.append = function(tag) {
      doms.each(function(dom, i) {
        var newDom;
        newDom = void 0;
        if (SVG_TAGS.indexOf(tag.toLowerCase()) > -1) {
          newDom = document.createElementNS('http://www.w3.org/2000/svg', tag);
        } else {
          newDom = document.createElement(tag);
        }
        doms[i] = dom.appendChild(newDom);
      });
      return this;
    };
    this.on = function(type, callback) {
      doms.each(function(dom) {
        dom.addEventListener(type, callback);
      });
      return this;
    };
    this.off = function(type, callback) {
      doms.each(function(dom) {
        dom.removeEventListener(type, callback);
      });
      return this;
    };
  };
  global.$ = function(selector) {
    var selections;
    selections = [];
    if (typeof selector === 'string') {
      selections = [].slice.call(document.querySelectorAll(selector));
    }
    jQuery.apply(selections);
    return selections;
  };
  global.$.ready = function(onLoad) {
    document.addEventListener('DOMContentLoaded', onLoad);
  };

  /* $.ajax()
  		options:
  			url: string
  			====
  			async = true: bool
  			## data: object - query parameters TODO: implement this
  			method = GET: POST, PUT, DELETE, HEAD
  			username: string
  			password: string
  			success: function
  			error: function
  			complete: function
   */
  global.$.ajax = function(url, ops) {
    var xhr;
    if (!ops) {
      if (typeof url === 'object') {
        ops = url;
        url = ops.url;
      } else {
        ops = {};
      }
    }
    ops.method = ops.method || 'GET';
    if (ops.async === void 0) {
      ops.async = true;
    }
    xhr = new XMLHttpRequest;
    xhr.onreadystatechange = function() {
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          if (!!ops.success) {
            ops.success(xhr.responseText, xhr.status, xhr);
          }
        } else {
          if (!!ops.error) {
            ops.error(xhr, xhr.status);
          }
        }
        if (!!ops.complete) {
          ops.complete(xhr, xhr.status);
        }
      }
    };
    xhr.open(ops.method, url, ops.async, ops.username, ops.password);
    xhr.send(null);
  };
})(window || this);

//# sourceMappingURL=MicroJQuery.js.map
