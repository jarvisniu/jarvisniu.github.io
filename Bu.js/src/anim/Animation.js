// Generated by CoffeeScript 1.10.0
Bu.Animation = (function() {
  function Animation(options) {
    this.from = options.from;
    this.to = options.to;
    this.data = options.data || {};
    this.duration = options.duration || 0.5;
    this.repeat = options.repeat != null ? options.repeat : false;
    this.init = options.init;
    this.update = options.update;
    this.finish = options.finish;
  }

  Animation.prototype.apply = function(target, args) {
    return Bu.animationRunner.add(this, target, args);
  };

  return Animation;

})();

Bu.animations = {
  fadeIn: new Bu.Animation({
    update: function(t) {
      return this.opacity = t;
    }
  }),
  fadeOut: new Bu.Animation({
    update: function(t) {
      return this.opacity = 1 - t;
    }
  }),
  spin: new Bu.Animation({
    update: function(t) {
      return this.rotation = t * Math.PI * 2;
    }
  }),
  spinIn: new Bu.Animation({
    update: function(t) {
      this.opacity = t;
      this.rotation = t * Math.PI * 4;
      return this.scale = t;
    }
  }),
  spinOut: new Bu.Animation({
    update: function(t) {
      this.opacity = 1 - t;
      this.rotation = t * Math.PI * 4;
      return this.scale = 1 - t;
    }
  }),
  blink: new Bu.Animation({
    duration: 0.2,
    from: 0,
    to: 512,
    update: function(d) {
      d = Math.floor(Math.abs(d - 256));
      return this.fillStyle = "rgb(" + d + ", " + d + ", " + d + ")";
    }
  }),
  shake: new Bu.Animation({
    init: function(anim, arg) {
      anim.data.ox = this.translate.x;
      return anim.data.range = arg || 20;
    },
    update: function(t, data) {
      return this.translate.x = Math.sin(t * Math.PI * 8) * data.range + data.ox;
    }
  }),
  puff: new Bu.Animation({
    duration: 0.15,
    init: function(anim) {
      anim.from = {
        opacity: this.opacity,
        scale: this.opacity === 1 ? 1 : 1.5
      };
      return anim.to = {
        opacity: this.opacity === 1 ? 0 : 1,
        scale: this.opacity === 1 ? 1.5 : 1
      };
    },
    update: function(d) {
      this.opacity = d.opacity;
      return this.scale = d.scale;
    }
  }),
  clip: new Bu.Animation({
    init: function(anim) {
      if (typeof this.scale === 'number') {
        this.scale = new Bu.Vector(this.scale, this.scale);
      }
      if (this.scale.y === 0) {
        anim.from = 0;
        return anim.to = 1;
      } else {
        anim.from = 1;
        return anim.to = 0;
      }
    },
    update: function(d) {
      return this.scale.y = d;
    }
  }),
  flipX: new Bu.Animation({
    init: function(anim) {
      if (typeof this.scale === 'number') {
        this.scale = new Bu.Vector(this.scale, this.scale);
      }
      anim.from = this.scale.x;
      return anim.to = -anim.from;
    },
    update: function(data) {
      return this.scale.x = data;
    }
  }),
  flipY: new Bu.Animation({
    init: function(anim) {
      if (typeof this.scale === 'number') {
        this.scale = new Bu.Vector(this.scale, this.scale);
      }
      anim.from = this.scale.y;
      return anim.to = -anim.from;
    },
    update: function(d) {
      return this.scale.y = d;
    }
  }),
  moveTo: new Bu.Animation({
    init: function(anim, args) {
      if (args != null) {
        anim.from = this.translate.x;
        return anim.to = args;
      } else {
        return console.error('animation moveTo need an argument');
      }
    },
    update: function(data) {
      return this.translate.x = data;
    }
  }),
  moveBy: new Bu.Animation({
    init: function(anim, args) {
      if (args != null) {
        anim.from = this.translate.x;
        return anim.to = this.translate.x + parseFloat(args);
      } else {
        return console.error('animation moveTo need an argument');
      }
    },
    update: function(data) {
      return this.translate.x = data;
    }
  })
};

//# sourceMappingURL=Animation.js.map
