// Generated by CoffeeScript 1.10.0
var base, base1,
  hasProp = {}.hasOwnProperty;

this.Bu = function() {
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(Bu.Renderer, arguments, function(){});
};


/*
 * constants
 */

Bu.VERSION = '0.3.1';

Bu.DEFAULT_STROKE_STYLE = '#048';

Bu.DEFAULT_FILL_STYLE = 'rgba(64, 128, 192, 0.5)';

Bu.DEFAULT_DASH_STYLE = [8, 4];

Bu.DEFAULT_SPLINE_SMOOTH = 0.25;

Bu.DEFAULT_STROKE_STYLE_HOVER = 'rgba(255, 128, 0, 0.75)';

Bu.DEFAULT_FILL_STYLE_HOVER = 'rgba(255, 128, 128, 0.5)';

Bu.DEFAULT_TEXT_FILL_STYLE = 'black';

Bu.DEFAULT_IMAGE_SIZE = 20;

Bu.POINT_RENDER_SIZE = 2.25;

Bu.POINT_LABEL_OFFSET = 5;

Bu.DEFAULT_BOUND_STROKE_STYLE = '#444';

Bu.DEFAULT_BOUND_DASH_STYLE = [6, 6];

Bu.DEFAULT_NEAR_DIST = 5;

Bu.MOUSE_BUTTON_NONE = -1;

Bu.MOUSE_BUTTON_LEFT = 0;

Bu.MOUSE_BUTTON_MIDDLE = 1;

Bu.MOUSE_BUTTON_RIGHT = 2;


/*
 * utility functions
 */

Bu.average = function() {
  var i, j, len, ns, sum;
  ns = arguments;
  if (typeof arguments[0] === 'object') {
    ns = arguments[0];
  }
  sum = 0;
  for (j = 0, len = ns.length; j < len; j++) {
    i = ns[j];
    sum += i;
  }
  return sum / ns.length;
};

Bu.bevel = function(x, y) {
  return Math.sqrt(x * x + y * y);
};

Bu.rand = function(from, to) {
  if (to == null) {
    to = from;
    from = 0;
  }
  return Math.random() * (to - from) + from;
};

Bu.r2d = function(r) {
  return (r * 180 / Math.PI).toFixed(1);
};

Bu.now = (typeof window !== "undefined" && window !== null ? window.performance : void 0) != null ? function() {
  return window.performance.now();
} : function() {
  return Date.now();
};

Bu.combineOptions = function(args, defaultOptions) {
  var givenOptions, i;
  if (defaultOptions == null) {
    defaultOptions = {};
  }
  givenOptions = args[args.length - 1];
  if (typeof givenOptions === 'object') {
    for (i in givenOptions) {
      defaultOptions[i] = givenOptions[i];
    }
  }
  return defaultOptions;
};

Bu.clone = function(target, deep) {
  var clone, i, results, results1;
  if (deep == null) {
    deep = false;
  }
  if (target instanceof Array) {
    clone = [];
    results = [];
    for (i in target) {
      if (!hasProp.call(target, i)) continue;
      results.push(clone[i] = target[i]);
    }
    return results;
  } else if (target instanceof Object) {
    clone = {};
    results1 = [];
    for (i in target) {
      if (!hasProp.call(target, i)) continue;
      results1.push(clone[i] = target[i]);
    }
    return results1;
  }
};

Bu.data = function(key, value) {
  if (value != null) {
    return localStorage['Bu.' + key] = JSON.stringify(value);
  } else {
    value = localStorage['Bu.' + key];
    if (value != null) {
      return JSON.parse(value);
    } else {
      return null;
    }
  }
};


/*
 * polyfill
 */

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};

Function.prototype.throttle = function(limit) {
  var currTime, lastTime;
  if (limit == null) {
    limit = 0.5;
  }
  currTime = 0;
  lastTime = 0;
  return (function(_this) {
    return function() {
      currTime = Date.now();
      if (currTime - lastTime > limit * 1000) {
        _this.apply(null, arguments);
        return lastTime = currTime;
      }
    };
  })(this);
};

Function.prototype.debounce = function(delay) {
  var args, later, timeout;
  if (delay == null) {
    delay = 0.5;
  }
  args = null;
  timeout = null;
  later = (function(_this) {
    return function() {
      return _this.apply(null, args);
    };
  })(this);
  return function() {
    args = arguments;
    clearTimeout(timeout);
    return timeout = setTimeout(later, delay * 1000);
  };
};

(base = Array.prototype).each || (base.each = function(fn) {
  var i;
  i = 0;
  while (i < this.length) {
    fn(this[i]);
    i++;
  }
  return this;
});

(base1 = Array.prototype).map || (base1.map = function(fn) {
  var arr, i;
  arr = [];
  i = 0;
  while (i < this.length) {
    arr.push(fn(this[i]));
    i++;
  }
  return this;
});

//# sourceMappingURL=Bu.js.map
