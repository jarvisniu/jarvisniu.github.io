// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Bu.DrawCircleReactor = (function(superClass) {
  extend(DrawCircleReactor, superClass);

  function DrawCircleReactor(bu) {
    var circle, isConfirmed, line, mouseButton, mousePos, mousePosDown;
    this.bu = bu;
    DrawCircleReactor.__super__.constructor.call(this);
    mouseButton = Bu.MOUSE_BUTTON_NONE;
    mousePos = new Bu.Point;
    mousePosDown = new Bu.Point;
    isConfirmed = true;
    circle = null;
    line = null;
    this.onMouseDown = (function(_this) {
      return function(e) {
        if (!isConfirmed) {
          circle = null;
          isConfirmed = true;
        } else {
          mousePosDown.set(e.offsetX, e.offsetY);
          circle = new Bu.Circle(mousePosDown.x, mousePosDown.y, 1);
          _this.bu.append(circle);
          line = new Bu.Line(mousePosDown, mousePosDown);
          line.stroke('#f44');
          _this.bu.append(line);
          isConfirmed = false;
        }
        return mouseButton = e.button;
      };
    })(this);
    this.onMouseMove = (function(_this) {
      return function(e) {
        mousePos.set(e.offsetX, e.offsetY);
        if ((!isConfirmed) || (mouseButton === Bu.MOUSE_BUTTON_LEFT && (circle != null))) {
          circle.radius = mousePos.distanceTo(mousePosDown);
          return line.setPoint1(mousePos);
        }
      };
    })(this);
    this.onMouseUp = (function(_this) {
      return function() {
        mouseButton = Bu.MOUSE_BUTTON_NONE;
        return isConfirmed = mousePos.distanceTo(mousePosDown) > Bu.POINT_RENDER_SIZE;
      };
    })(this);
  }

  return DrawCircleReactor;

})(Bu.ReactorBase);

//# sourceMappingURL=DrawCircleReactor.js.map
