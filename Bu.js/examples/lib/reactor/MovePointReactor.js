// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Bu.MovePointReactor = (function(superClass) {
  extend(MovePointReactor, superClass);

  function MovePointReactor(bu) {
    var hoveredPoint, mouseButton, mousePos, mousePosDown, mousePosDownDelta;
    this.bu = bu;
    MovePointReactor.__super__.constructor.call(this);
    mouseButton = Bu.MOUSE_BUTTON_NONE;
    mousePos = new Bu.Point;
    mousePosDown = new Bu.Vector;
    mousePosDownDelta = new Bu.Vector;
    hoveredPoint = null;
    this.onMouseDown = function(e) {
      mousePosDown.set(e.offsetX, e.offsetY);
      if (hoveredPoint != null) {
        mousePosDownDelta.set(mousePosDown.x - hoveredPoint.x, mousePosDown.y - hoveredPoint.y);
      }
      return mouseButton = e.button;
    };
    this.onMouseMove = (function(_this) {
      return function(e) {
        var i, len, ref, results, shape;
        mousePos.set(e.offsetX, e.offsetY);
        if (mouseButton === Bu.MOUSE_BUTTON_LEFT) {
          if (hoveredPoint != null) {
            return hoveredPoint.set(mousePos.x - mousePosDownDelta.x, mousePos.y - mousePosDownDelta.y);
          }
        } else {
          if (hoveredPoint != null) {
            if (!hoveredPoint.isNear(mousePos)) {
              hoveredPoint.lineWidth = 0.5;
              hoveredPoint.fill();
              return hoveredPoint = null;
            }
          } else {
            ref = _this.bu.shapes;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              shape = ref[i];
              if (shape.type === 'Point' && shape.isNear(mousePos)) {
                hoveredPoint = shape;
                hoveredPoint.lineWidth = 1;
                hoveredPoint.fill('#f80');
                break;
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        }
      };
    })(this);
    this.onMouseUp = (function(_this) {
      return function() {
        return mouseButton = Bu.MOUSE_BUTTON_NONE;
      };
    })(this);
  }

  return MovePointReactor;

})(Bu.ReactorBase);

//# sourceMappingURL=MovePointReactor.js.map
