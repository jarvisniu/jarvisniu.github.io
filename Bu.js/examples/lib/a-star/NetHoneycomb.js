
/**
 * NetHoneycomb - a net consists of hexagons like a honeycomb.
 * @param w - Width of the honeycomb net.
 * @param h - Height of the honeycomb net.
 * @constructor
 */

(function() {
  AStar.NetHoneycomb = function(w, h) {
    this.engine = null;
    this.nodes = [];
    this.width = w || 15;
    this.height = h || 10;
    this.startNode = null;
    this.endNode = null;
    this.setStart = function(x, y) {
      var node;
      node = this.getNode(x, y);
      if (node.state !== AStar.NODE_STATE_DEFAULT) {
        return;
      }
      if (this.startNode != null) {
        if (this.startNode.position.x === x && this.startNode.position.y === y) {
          return;
        }
        this.startNode.state = AStar.NODE_STATE_DEFAULT;
        this.engine.trigger('nodeChanged', this.startNode.position);
      }
      this.startNode = node;
      node.state = AStar.NODE_STATE_START;
      this.engine.trigger('nodeChanged', node.position);
    };
    this.setEnd = function(x, y) {
      var node;
      node = this.getNode(x, y);
      if (node.state !== AStar.NODE_STATE_DEFAULT) {
        return;
      }
      if (this.endNode != null) {
        if (this.endNode.position.x === x && this.endNode.position.y === y) {
          return;
        }
        this.endNode.state = AStar.NODE_STATE_DEFAULT;
        this.engine.trigger('nodeChanged', this.endNode.position);
      }
      this.endNode = node;
      node.state = AStar.NODE_STATE_END;
      this.engine.trigger('nodeChanged', node.position);
    };
    this.getNode = function(x, y) {
      var base;
      (base = this.nodes)[x] || (base[x] = []);
      if (this.nodes[x][y] == null) {
        this.nodes[x][y] = new AStar.Node(this);
        this.nodes[x][y].position.x = x;
        this.nodes[x][y].position.y = y;
      }
      return this.nodes[x][y];
    };
    this.getNeighboursOf = function(node) {
      var i, j, k, l, neighbour, ref, ref1, ref2, ref3, x, xFrom, xTo, y, yFrom, yTo;
      if (node.neighbours != null) {
        return node.neighbours;
      }
      x = node.position.x;
      y = node.position.y;
      xFrom = x - 1;
      xTo = x + 1;
      yFrom = y - 1;
      yTo = y + 1;
      if (xFrom < 0) {
        xFrom = 0;
      }
      if (xFrom > this.width - 1) {
        xFrom = this.width - 1;
      }
      if (xTo < 0) {
        xTo = 0;
      }
      if (xTo > this.width - 1) {
        xTo = this.width - 1;
      }
      if (yFrom < 0) {
        yFrom = 0;
      }
      if (yFrom > this.height - 1) {
        yFrom = this.height - 1;
      }
      if (yTo < 0) {
        yTo = 0;
      }
      if (yTo > this.height - 1) {
        yTo = this.height - 1;
      }
      node.neighbours = [];
      for (i = k = ref = xFrom, ref1 = xTo; ref <= ref1 ? k <= ref1 : k >= ref1; i = ref <= ref1 ? ++k : --k) {
        for (j = l = ref2 = yFrom, ref3 = yTo; ref2 <= ref3 ? l <= ref3 : l >= ref3; j = ref2 <= ref3 ? ++l : --l) {
          neighbour = this.getNode(i, j);
          if (i === x && j === y) {
            continue;
          }
          if (neighbour.state === AStar.NODE_STATE_OBSTACLE) {
            continue;
          }
          if ((i - x) * (j - y) > 0) {
            continue;
          }
          node.neighbours.push(neighbour);
        }
      }
      return node.neighbours;
    };
    this.calcShortestDistance = function(node1, node2) {
      var dx, dy;
      dx = node1.position.x - node2.position.x;
      dy = node1.position.y - node2.position.y;
      if (dx * dy < 0) {
        return Math.abs(Math.abs(dx + dy) + Math.min(Math.abs(dx), Math.abs(dy)));
      } else {
        return Math.abs(dx + dy);
      }
    };
    return this;
  };

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
