
/**
 * NetHoneycomb - a net consists of hexagons like a honeycomb.
 * @param w - Width of the honeycomb net.
 * @param h - Height of the honeycomb net.
 * @constructor
 */

(function() {
  AStar.NetHoneycomb = function(w, h) {
    this.engine = null;
    this.nodes = [];
    this.width = 15 || w;
    this.height = 10 || h;
    this.startNode = null;
    this.endNode = null;
    this.setStart = function(x, y) {
      var node;
      node = this.getNode(x, y);
      this.startNode = node;
      node.state = AStar.NODE_STATE_START;
      this.engine.trigger('nodeChanged', node.position);
    };
    this.setEnd = function(x, y) {
      var node;
      node = this.getNode(x, y);
      this.endNode = node;
      node.state = AStar.NODE_STATE_END;
      this.engine.trigger('nodeChanged', node.position);
    };
    this.getNode = function(x, y) {
      var base;
      (base = this.nodes)[x] || (base[x] = []);
      if (this.nodes[x][y] == null) {
        this.nodes[x][y] = new AStar.Node(this);
        this.nodes[x][y].position.x = x;
        this.nodes[x][y].position.y = y;
      }
      return this.nodes[x][y];
    };
    this.getNeighboursOf = function(node) {
      var i, j, k, l, neighbour, ref, ref1, ref2, ref3, x, xFrom, xTo, y, yFrom, yTo;
      if (node.neighbours != null) {
        return node.neighbours;
      }
      x = node.position.x;
      y = node.position.y;
      xFrom = x - 1;
      xTo = x + 1;
      yFrom = y - 1;
      yTo = y + 1;
      if (xFrom < 0) {
        xFrom = 0;
      }
      if (xFrom > this.width - 1) {
        xFrom = this.width - 1;
      }
      if (xTo < 0) {
        xTo = 0;
      }
      if (xTo > this.width - 1) {
        xTo = this.width - 1;
      }
      if (yFrom < 0) {
        yFrom = 0;
      }
      if (yFrom > this.height - 1) {
        yFrom = this.height - 1;
      }
      if (yTo < 0) {
        yTo = 0;
      }
      if (yTo > this.height - 1) {
        yTo = this.height - 1;
      }
      node.neighbours = [];
      for (i = k = ref = xFrom, ref1 = xTo; ref <= ref1 ? k <= ref1 : k >= ref1; i = ref <= ref1 ? ++k : --k) {
        for (j = l = ref2 = yFrom, ref3 = yTo; ref2 <= ref3 ? l <= ref3 : l >= ref3; j = ref2 <= ref3 ? ++l : --l) {
          neighbour = this.getNode(i, j);
          if (i === x && j === y) {
            continue;
          }
          if (neighbour.state === AStar.NODE_STATE_OBSTACLE) {
            continue;
          }
          if ((i - x) * (j - y) > 0) {
            continue;
          }
          node.neighbours.push(neighbour);
        }
      }
      return node.neighbours;
    };
    this.calcShortestDistance = function(node1, node2) {
      var dx, dy;
      dx = node1.position.x - node2.position.x;
      dy = node1.position.y - node2.position.y;
      if (dx * dy < 0) {
        return Math.abs(Math.abs(dx + dy) + Math.min(Math.abs(dx), Math.abs(dy)));
      } else {
        return Math.abs(dx + dy);
      }
    };
    return this;
  };

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImEtc3Rhci9OZXRIb25leWNvbWIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7OztBQUFBO0VBT0EsS0FBSyxDQUFDLFlBQU4sR0FBcUIsU0FBQyxDQUFELEVBQUksQ0FBSjtJQUNwQixJQUFDLENBQUEsTUFBRCxHQUFVO0lBQ1YsSUFBQyxDQUFBLEtBQUQsR0FBUztJQUVULElBQUMsQ0FBQSxLQUFELEdBQVMsRUFBQSxJQUFNO0lBQ2YsSUFBQyxDQUFBLE1BQUQsR0FBVSxFQUFBLElBQU07SUFFaEIsSUFBQyxDQUFBLFNBQUQsR0FBYTtJQUNiLElBQUMsQ0FBQSxPQUFELEdBQVc7SUFFWCxJQUFDLENBQUEsUUFBRCxHQUFZLFNBQUMsQ0FBRCxFQUFJLENBQUo7QUFDWCxVQUFBO01BQUEsSUFBQSxHQUFPLElBQUMsQ0FBQSxPQUFELENBQVMsQ0FBVCxFQUFZLENBQVo7TUFDUCxJQUFDLENBQUEsU0FBRCxHQUFhO01BRWIsSUFBSSxDQUFDLEtBQUwsR0FBYSxLQUFLLENBQUM7TUFDbkIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLENBQWdCLGFBQWhCLEVBQStCLElBQUksQ0FBQyxRQUFwQztJQUxXO0lBUVosSUFBQyxDQUFBLE1BQUQsR0FBVSxTQUFDLENBQUQsRUFBSSxDQUFKO0FBQ1QsVUFBQTtNQUFBLElBQUEsR0FBTyxJQUFDLENBQUEsT0FBRCxDQUFTLENBQVQsRUFBWSxDQUFaO01BQ1AsSUFBQyxDQUFBLE9BQUQsR0FBVztNQUVYLElBQUksQ0FBQyxLQUFMLEdBQWEsS0FBSyxDQUFDO01BQ25CLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixDQUFnQixhQUFoQixFQUErQixJQUFJLENBQUMsUUFBcEM7SUFMUztJQVFWLElBQUMsQ0FBQSxPQUFELEdBQVcsU0FBQyxDQUFELEVBQUksQ0FBSjtBQUNWLFVBQUE7Y0FBQSxJQUFDLENBQUEsTUFBTSxDQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsSUFBTztNQUNkLElBQU8sd0JB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b0IsSUFBSSxDQUFDLEdBQUwsQ0FBUyxJQUFJLENBQUMsR0FBTCxDQUFTLEVBQVQsQ0FBVCxFQUF1QixJQUFJLENBQUMsR0FBTCxDQUFTLEVBQVQsQ0FBdkIsQ0FBN0IsRUFEUjtPQUFBLE1BQUE7QUFHQyxlQUFPLElBQUksQ0FBQyxHQUFMLENBQVMsRUFBQSxHQUFLLEVBQWQsRUFIUjs7SUFIdUI7QUFReEIsV0FBTztFQTVFYTtBQVByQiIsImZpbGUiOiJhLXN0YXIvTmV0SG9uZXljb21iLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIyMjKlxyXG4jIE5ldEhvbmV5Y29tYiAtIGEgbmV0IGNvbnNpc3RzIG9mIGhleGFnb25zIGxpa2UgYSBob25leWNvbWIuXHJcbiMgQHBhcmFtIHcgLSBXaWR0aCBvZiB0aGUgaG9uZXljb21iIG5ldC5cclxuIyBAcGFyYW0gaCAtIEhlaWdodCBvZiB0aGUgaG9uZXljb21iIG5ldC5cclxuIyBAY29uc3RydWN0b3JcclxuIyMjXHJcblxyXG5BU3Rhci5OZXRIb25leWNvbWIgPSAodywgaCkgLT5cclxuXHRAZW5naW5lID0gbnVsbFxyXG5cdEBub2RlcyA9IFtdXHJcblxyXG5cdEB3aWR0aCA9IDE1IG9yIHdcclxuXHRAaGVpZ2h0ID0gMTAgb3IgaFxyXG5cclxuXHRAc3RhcnROb2RlID0gbnVsbFxyXG5cdEBlbmROb2RlID0gbnVsbFxyXG5cclxuXHRAc2V0U3RhcnQgPSAoeCwgeSkgLT5cclxuXHRcdG5vZGUgPSBAZ2V0Tm9kZSh4LCB5KVxyXG5cdFx0QHN0YXJ0Tm9kZSA9IG5vZGVcclxuXHJcblx0XHRub2RlLnN0YXRlID0gQVN0YXIuTk9ERV9TVEFURV9TVEFSVFxyXG5cdFx0QGVuZ2luZS50cmlnZ2VyICdub2RlQ2hhbmdlZCcsIG5vZGUucG9zaXRpb25cclxuXHRcdHJldHVyblxyXG5cclxuXHRAc2V0RW5kID0gKHgsIHkpIC0+XHJcblx0XHRub2RlID0gQGdldE5vZGUoeCwgeSlcclxuXHRcdEBlbmROb2RlID0gbm9kZVxyXG5cclxuXHRcdG5vZGUuc3RhdGUgPSBBU3Rhci5OT0RFX1NUQVRFX0VORFxyXG5cdFx0QGVuZ2luZS50cmlnZ2VyICdub2RlQ2hhbmdlZCcsIG5vZGUucG9zaXRpb25cclxuXHRcdHJldHVyblxyXG5cclxuXHRAZ2V0Tm9kZSA9ICh4LCB5KSAtPlxyXG5cdFx0QG5vZGVzW3hdIG9yPSBbXVxyXG5cdFx0aWYgbm90IEBub2Rlc1t4XVt5XT9cclxuXHRcdFx0QG5vZGVzW3hdW3ldID0gbmV3IEFTdGFyLk5vZGUgdGhpc1xyXG5cdFx0XHRAbm9kZXNbeF1beV0ucG9zaXRpb24ueCA9IHhcclxuXHRcdFx0QG5vZGVzW3hdW3ldLnBvc2l0aW9uLnkgPSB5XHJcblx0XHRAbm9kZXNbeF1beV1cclxuXHJcblx0QGdldE5laWdoYm91cnNPZiA9IChub2RlKSAtPlxyXG5cdFx0cmV0dXJuIG5vZGUubmVpZ2hib3VycyBpZiBub2RlLm5laWdoYm91cnM/XHJcblxyXG5cdFx0eCA9IG5vZGUucG9zaXRpb24ueFxyXG5cdFx0eSA9IG5vZGUucG9zaXRpb24ueVxyXG5cclxuXHRcdHhGcm9tID0geCAtIDFcclxuXHRcdHhUbyA9IHggKyAxXHJcblx0XHR5RnJvbSA9IHkgLSAxXHJcblx0XHR5VG8gPSB5ICsgMVxyXG5cclxuXHRcdHhGcm9tID0gMCBpZiB4RnJvbSA8IDBcclxuXHRcdHhGcm9tID0gQHdpZHRoIC0gMSBpZiB4RnJvbSA+IEB3aWR0aCAtIDFcclxuXHRcdHhUbyA9IDAgaWYgeFRvIDwgMFxyXG5cdFx0eFRvID0gQHdpZHRoIC0gMSBpZiB4VG8gPiBAd2lkdGggLSAxXHJcblxyXG5cdFx0eUZyb20gPSAwIGlmIHlGcm9tIDwgMFxyXG5cdFx0eUZyb20gPSBAaGVpZ2h0IC0gMSBpZiB5RnJvbSA+IEBoZWlnaHQgLSAxXHJcblx0XHR5VG8gPSAwIGlmIHlUbyA8IDBcclxuXHRcdHlUbyA9IEBoZWlnaHQgLSAxIGlmIHlUbyA+IEBoZWlnaHQgLSAxXHJcblxyXG5cdFx0bm9kZS5uZWlnaGJvdXJzID0gW11cclxuXHJcblx0XHRmb3IgaSBpbiBbeEZyb20uLnhUb11cclxuXHRcdFx0Zm9yIGogaW4gW3lGcm9tLi55VG9dXHJcblx0XHRcdFx0bmVpZ2hib3VyID0gQGdldE5vZGUoaSwgailcclxuXHRcdFx0XHQjIG5vdCBpdHNlbGZcclxuXHRcdFx0XHRjb250aW51ZSBpZiBpID09IHggYW5kIGogPT0geVxyXG5cdFx0XHRcdCMgbm90IG9ic3RhY2xlXHJcblx0XHRcdFx0Y29udGludWUgaWYgbmVpZ2hib3VyLnN0YXRlID09IEFTdGFyLk5PREVfU1RBVEVfT0JTVEFDTEVcclxuXHRcdFx0XHRjb250aW51ZSBpZiAoaSAtIHgpICogKGogLSB5KSA+IDBcclxuXHRcdFx0XHRub2RlLm5laWdoYm91cnMucHVzaCBuZWlnaGJvdXJcclxuXHRcdG5vZGUubmVpZ2hib3Vyc1xyXG5cclxuXHRAY2FsY1Nob3J0ZXN0RGlzdGFuY2UgPSAobm9kZTEsIG5vZGUyKSAtPlxyXG5cdFx0ZHggPSBub2RlMS5wb3NpdGlvbi54IC0gKG5vZGUyLnBvc2l0aW9uLngpXHJcblx0XHRkeSA9IG5vZGUxLnBvc2l0aW9uLnkgLSAobm9kZTIucG9zaXRpb24ueSlcclxuXHRcdGlmIGR4ICogZHkgPCAwXHJcblx0XHRcdHJldHVybiBNYXRoLmFicyBNYXRoLmFicyhkeCArIGR5KSArIE1hdGgubWluKE1hdGguYWJzKGR4KSwgTWF0aC5hYnMoZHkpKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gTWF0aC5hYnMgZHggKyBkeVxyXG5cclxuXHRyZXR1cm4gdGhpc1xyXG4iXX0=
