/**********************************************************
 * Geometry Math Calculations
 * 地理运算函数库
 * Author: BJ Niu
 *
 * ========  Feature  ===========
 *
 * 1. 角度、弧度转换
 * 2. 经纬度、图块索引转换
 *
 * ========  Change Log  ========
 *
 * 1.1 - 2014/02/19
 *     - pow2d2 in y2lat();
 *
 * 1.2 - 2014/10/08
 *     - add trimEndedZero(string)
 *     - add r1() to r5()
 *     - add coordinate2index()
 *     - add coordinate2indexI()
 *
 * 2.0.0 - 2014/12/03
 *     - remove
 *     - lng to lon
 *
 **********************************************************
 */

// 一些常量，用来提升计算效率
var D2R = Math.PI / 180;
var R2D = 180.0 / Math.PI;
var PI2 = Math.PI / 2;
var PI4 = Math.PI / 4;
var PI360 = Math.PI / 360;
var PIInv = 1 / Math.PI;

var pow2 = [];
for (var i = 0; i < 30; i++) {
    pow2[i] = Math.pow(2, i);
}
var pow2d2 = [];
for (i = 0; i < 30; i++) {
    pow2d2[i] = 2 / pow2[i];
}

// degree & radius, three alias 三个别名
var degToRad = deg2rad = d2r = function(d) {
    return d * D2R;
};

var radToDeg = rad2deg = r2d = function(r) {
    return r * R2D;
};


/**
 * Get the tile index of a geography coordinate.
 * 计算三项：整数形式、小数形式、小数部分
 *
 * @param latLon {object} Object that contains the lon and lat attributes.
 * @param level {int} The destination zoom level.
 */
function getTileIndexFromLonLat(latLon, level) {
    var indexObj = {};
    indexObj.deciX = lon2index(latLon.lon, level);
    indexObj.deciY = lat2index(latLon.lat, level);
    indexObj.x = Math.floor(indexObj.deciX);
    indexObj.y = Math.floor(indexObj.deciY);
    indexObj.fracX = indexObj.deciX - indexObj.x;
    indexObj.fracY = indexObj.deciY - indexObj.y;
    return indexObj;
}

// 经纬度转换为图块索引（小数形式的索引，可以定位到具体像素）//TODO 未验证
function index2coordinate(x1, y1, x2, y2, level) {
    var o = {};
    o.lon1 = index2lon(x1, level);
    o.lat1 = index2lat(y2, level);  // 反转纬度
    o.lon2 = index2lon(x2, level);
    o.lat2 = index2lat(y1, level);  // 反转纬度
    return o;
}

// 经纬度转换为图块索引（小数形式的索引，可以定位到具体像素）
function coordinate2index(lon1, lat1, lon2, lat2, level) {
    var o = {};
    o.x1 = lon2index(lon1, level);
    o.y1 = lat2index(lat2, level);  // 反转纬度
    o.x2 = lon2index(lon2, level);
    o.y2 = lat2index(lat1, level);  // 反转纬度
    return o;
}

// 经纬度转换为图块索引（整数形式的索引，不可以定位到具体像素，用来生成图的URL）
function coordinate2indexI(lon1, lat1, lon2, lat2, level) {
    var o = {};
    o.x1 = Math.floor(lon2index(lon1, level));
    o.y1 = Math.floor(lat2index(lat2, level));  // 反转纬度，为了保持 1<2
    o.x2 = Math.floor(lon2index(lon2, level));
    o.y2 = Math.floor(lat2index(lat1, level));  // 反转纬度，为了保持 1<2
    return o;
}

// 经度到图块索引
function lon2index(lon, level) {
    return lon2per(lon) * pow2[level];
}

// 纬度到图块索引
function lat2index(lat, level) {
    return lat2per(lat) * pow2[level];
}

// 图块索引到经度
function index2lon(x, level) {
    return x * 360 / pow2[level] - 180;
}

// 图块索引到纬度
function index2lat(y, level) {
    return (2 * Math.atan(Math.exp((1 - y * pow2d2[level]) * Math.PI)) - PI2) * R2D;
}

// 经度到百分比
function lon2per(lon) {
    return (lon + 180) / 360;
}

// 纬度到百分比
function lat2per(lat) {
    //return 0.5 - 0.5 * Math.log(Math.tan(Math.PI / 4 + d2r(lat) / 2 )) / Math.PI; // 未优化版本
    return 0.5 - 0.5 * Math.log(Math.tan(PI4 + lat * PI360 )) * PIInv;
}

// 纬度到百分比（备用算法）
function lon2per2(lon) {
    //var siny = Math.min(Math.max(Math.sin(d2r(lon)), -0.9999),0.9999);
    var siny = Math.sin(d2r(lon));
    return 0.5 - 0.25 * Math.log((1 + siny) / (1 - siny)) / Math.PI;
}

// 百分比到经度
function per2lon(p) {
    return p * 360 - 180;
}

// 百分比到纬度
function per2lat(p) {
    return r2d(2 * Math.atan(Math.exp((1 - p * 2) * Math.PI)) - Math.PI / 2);
}

//lat lon & meter
// 1 deg = 100km
/**
 * Coordinates converter, between Local(Distance) and LatLon
 * @param lon
 * @returns {number}
 */
function lon2mx(lon) {
    return lon * 100000;
}
function lat2my(lat) {
    return lat * 100000;
}
function mx2lon(mx) {
    return mx / 100000;
}
function my2lat(my) {
    return my / 100000;
}

// Math

// round
function r(n) {
    return Math.round(n);
}
function r1(n) {
    return Math.round(parseFloat(n) * 10) / 10;
}
function r2(n) {
    return Math.round(parseFloat(n) * 100) / 100;
}
function r3(n) {
    return Math.round(parseFloat(n) * 1000) / 1000;
}
function r4(n) {
    return Math.round(parseFloat(n) * 10000) / 10000;
}
function r5(n) {
    return Math.round(parseFloat(n) * 100000) / 100000;
}

// Utils
function trimEndedZero(str) {

    if (typeof str != "string") str = "" + str;

    var indexLastNotZero = -1;

    for (var i = str.length - 1; i >= 0; i--) {
        if (str.substring(i, i + 1) != "0") {
            indexLastNotZero = i;
            break;
        }
    }

    var num = str.substring(0, indexLastNotZero + 1);

    if (num.substring(num.length - 1, num.length) == ".") num += "0";

    return num;

}

// 判断一个数的符号：正负零
function sign(num) {
        return num > 0 ? 1 : (num < 0 ? -1 : 0);
}

// get the decimal part of a float number
function decimal(f) {
    return f - Math.floor(f);
}