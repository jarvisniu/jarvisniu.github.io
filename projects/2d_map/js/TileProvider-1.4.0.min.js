/* Tile Getter服务
 * 该类是一个服务类，用来从谷歌服务器上获取图片并在完全下载完成时报告给使用者。
 * 属性：progress，count
 * 方法：addJob，getImage
 * 事件：onComplete，onProgress
 *
 * ========================  Change Log  ==============================
 *     v1.1
 *         1. constructor optional parameter: mapType("s", "h", "m")
 *         2. When the network is offline, hang on the tiles and stop loading them. When it comes back online, reload the suspended tiles.
 *
 *     v1.2
 *         1. can load local tiles by set LocalPath = "./Tiles/"
 *         2. map source
 *         3. highlight
 *
 *     v1.3
 *         1. remove the constructor parameter
 *
 *     v1.4.0
 *         1. rename class to TileProvider
 *         2. Progress -> progress, Count -> count
 *         3. getImage() -> getDom()
 *         4. loadTile() -> load()
 *
 *     Plan
 *      - 吸收TileDownloader的优点：
 */

MapSource = {
    GOOGLE:             0,
    BING:               1,
    NOKIA:              2,
    OPEN:               3,
    OPEN_STREET_MAP:    3,
    OSM:                3,
    LOCAL:              4
};

MapType = {
    MAP:                0,
    SATELLITE:          1,
    HOVER:              2,
    TERRAIN:            3,
    HYBRID_TERRAIN:     4,
    HYBRID_SATELLITE:   5
};

function TileProvider(o) {

    this.count = 0;
    this.progress = 0;
    this.isOnline = navigator.onLine;

    this.onProgress = null;
    this.onComplete = null;

    //var TEXTURE_MISSING = loadTexture("..\\UploadTile\\missing.jpg");
    var source = MapSource.GOOGLE;      // chosen from google(default), bing, nokia, localFolder
    var localPath = "./";
    var type = "s";             // chosen from m, s(default), t, h
    var lang = "zh";            // language chosen from: zh, en
    var offset = false;         //
    var ext = ".png";
    var style = "";   // 这个可以改变地图的风格样式
    var highLightCode = "";  // You can highlight an area(Province, City, or Town) by showing its border, e.g. ChangYuan: "0x35da381ae5b05ebd:0xbd53a33ee02d0d78". It's only useful for Google map source.


    var MAX_LAYER = 21;
    var NOT_PROVIDED_URL = "./not_provided.jpg";

    var tiles = [];

    var self = this;
    var a = document.createElement("a");


    this.set = function(o) {

        if (o.type !== undefined || o.source !== undefined) {

            source = o.source || source;

            type = o.type || type;

            onChangeSrcType();

        }

        localPath = o.localPath || localPath;
        lang = o.lang || lang;
        offset = o.offset || offset;
        ext = o.ext || ext;
        style = o.style || style;
        highLightCode = o.highLight || highLightCode;

        if(o.source && o.source == MapType.LOCAL && (o.ext == undefined || o.localPath == undefined))
            alert("当你指定MapType为Local时，必须指明文件后缀名ext(=jpg|png)和存储路径localPath。");

    };

    if (o != undefined) this.set(o);

    this.getDom = function (x, y, z) {
        for (var i = 0; i < this.count; i++) {
            if (tiles[i].X == x && tiles[i].Y == y && tiles[i].Z == z) {
                var t = tiles[i];
                if ((self.isOnline || source == MapSource.LOCAL) && !t.IsLoaded) {
                    t.Image.src = getTileImageURL(x, y, z);
                    console.log(t.Image.src);
                }
                return t.Image;
            }
        }
        appendTile(x, y, z);
        return tiles[this.count - 1].Image;
    };

    this.has = function (x, y, z) {
        for (var i = 0; i < this.count; i++) {
            if (tiles[i].X == x && tiles[i].Y == y && tiles[i].Z == z && tiles[i].IsLoaded) {
                return true;
            }
        }
        return false;
    };

    this.load = function (x, y, z) {
        var isAlreadyHave = false;
        for (var i = 0; i < this.count; i++) {
            if (tiles[i].X == x && tiles[i].Y == y && tiles[i].Z == z) {
                isAlreadyHave = true;
            }
        }
        if (!isAlreadyHave) appendTile(x, y, z);
    };

    this.download = function (x, y, z) {
        _downloadTile(getTileImageURL(x, y, z), x, y, z);
    };

    this.downloadRange = function (x1, x2, y1, y2, z) {

        var xFrom = Math.min(x1, x2);
        var xTo = Math.max(x1, x2);
        var yFrom = Math.min(y1, y2);
        var yTo = Math.max(y1, y2);

        for ( var i = xFrom; i <= xTo; i++ ) {
            for ( var j = yFrom; j <= yTo; j++ ) {
                this.download(i, j, z);
            }
        }

    };

    this.downloadAll = function () {
        for (var i = 0; i < this.count; i++) {
            _downloadTile(tiles[i].Image.src, tiles[i].X, tiles[i].Y, tiles[i].Z);
        }
    };


    function onChangeSrcType() {
        if (source == MapSource.GOOGLE) {
            if (type == "m" || type == "h")
                ext = ".png";
            else if (type == "s" || type == "t")
                ext = ".jpg";
            else
                alert("NOT supported type for google: " + type);
        } else if (source == MapSource.BING) {
            if (type == "s")
                ext = ".jpg";
            else if (type == "m")
                ext = ".png";
            else
                alert("NOT supported type for bing: " + type);
        } else if (source == MapSource.NOKIA) {
            if (type == "m" || type == "s")
                ext = ".png";
            else
                alert("NOT supported type for nokia: " + type);
        } else if (source == MapSource.OPEN) {
            if (type == "m" || type == "t")
                ext = ".png";
            else
                alert("NOT supported type for open: " + type);
        } else if (source == MapSource.LOCAL) {
            // nothing is need to do
        } else {
            alert("不支持该类型的地图源：" + source + "\n支持的列表为：\n" + JSON.stringify(MapSource));
        }
    }


    function _downloadTile(src, x, y, z) {
        a.href = src;
        a.download = "" + z + "," + x + "," + y + ext;
        //console.log(a);
        a.click();
        //document.body.innerHTML += "<br />" + src;
    }

    // private
    function appendTile(x, y, z) {
        tiles[self.count] = {};
        tiles[self.count].Image = document.createElement("img");
        tiles[self.count].Image.onload = function () {
            self.progress++;
            if (self.progress == self.count) {
                if (typeof(self.onComplete) == "function") self.onComplete();
            }
            else if (typeof(self.onProgress) == "function") {
                self.onProgress();
            }
        };
        if (self.isOnline || source == MapSource.LOCAL) {
            if (x > -1 && x < Math.pow(2, z) && y > -1 && y < Math.pow(2, z) && z > -1 && z <= MAX_LAYER) {
                tiles[self.count].Image.src = getTileImageURL(x, y, z);
            }
            tiles[self.count].IsLoaded = true;
        } else {
            tiles[self.count].IsLoaded = false;
        }
        tiles[self.count].X = x;
        tiles[self.count].Y = y;
        tiles[self.count].Z = z;
        self.count++;
    }

    function getTileImageURL(x, y, z) {
        if (source == MapSource.GOOGLE) {
            return getGoogleTileURL(x, y, z);
        } else if (source == MapSource.BING) {
            return getBingTileURL(x, y, z);
        } else if (source == MapSource.NOKIA) {
            return getNokiaTileURL(x, y, z);
        } else if (source == MapSource.OPEN) {
            return getOpenTileURL(x, y, z);
        } else if (source == MapSource.LOCAL) {
            return localPath + z + "," + x + "," + y + ext;
        } else {
            console.error("getTileImageURL(x, y, z): Don't supported source:" + source);
        }
    }

    function getGoogleTileURL(x, y, z) {
        if (type == "m") {
            return "http://mt1.google.cn/vt/imgtp=png32&hl=" + lang + "&lyrs=m"
                + (highLightCode.length > 0 ? "@260000000,highlight:" + highLightCode : "")
                + (style.length > 0 ? "&apistyle=" + style : "")
                + "&x=" + x + "&y=" + y + "&z=" + z;
        } else if (type == "s") {
            if (offset)
                return "http://mt1.google.cn/vt/lyrs=s&hl=zh&gl=CN&x=" + x + "&y=" + y + "&z=" + z;
            else
                return "http://mt1.google.cn/vt/lyrs=s&hl=zh&x=" + x + "&y=" + y + "&z=" + z;
        } else if (type == "t") {
            return "http://mt1.google.cn/vt/lyrs=t&hl=" + lang + "&x=" + x + "&y=" + y + "&z=" + z;
        } else if (type == "p") {
            return "http://mt1.google.cn/vt/lyrs=p&hl=" + lang + "&x=" + x + "&y=" + y + "&z=" + z;
        } else if (type == "h") {
            if (offset)
                return "http://mt1.google.cn/vt/imgtp=png32&lyrs=h&hl=" + lang + "&gl=CN&x=" + x + "&y=" + y + "&z=" + z;
            else
                return NOT_PROVIDED_URL;
        } else
            return NOT_PROVIDED_URL;
    }

    function getBingTileURL(x, y, z) {
        var strNum = "";
        for (var i = 0; i < z; i++) {
            var intT = 0;
            var thisPow = Math.pow(2, z - i - 1);
            if (x >= thisPow)intT += 1;
            if (y >= thisPow)intT += 2;
            strNum += intT;

            x %= thisPow;
            y %= thisPow;
        }
        if (type == "m") {
            if (offset)
                return "http://t1.tiles.ditu.live.com/tiles/r" + strNum + ".png?g=2424";
            else
                return NOT_PROVIDED_URL;
        } else if (type == "s") {
            if (offset)
                return NOT_PROVIDED_URL;
            else
                return "http://ak.t3.tiles.virtualearth.net/tiles/a" + strNum + ".jpeg?g=2402";
        } else {
            return NOT_PROVIDED_URL;
        }
    }

    function getNokiaTileURL(x, y, z) {
        var nokiaLang = "lg=CHI&";
        if (lang == "en") nokiaLang = "lg=ENG&";

        if (type == "m")
            if (offset)
                return "http://1.maps.nlp.nokia.com.cn/maptile/2.1/maptile/a859cf9432/normal.day/"
                    + z + "/" + x + "/" + y + "/256/png8?" + nokiaLang + "token=JY0BReev8ax1gIrHZZoqIg";
            else
                return NOT_PROVIDED_URL;
        else if (type == "s")
            if (offset)
                return "http://3.maps.nlp.nokia.com.cn/maptile/2.1/maptile/a859cf9432/hybrid.day/" + z + "/" + x + "/" + y + "/256/png8?" + nokiaLang + "token=JY0BReev8ax1gIrHZZoqIg";
            else
                return NOT_PROVIDED_URL;
        else
            return NOT_PROVIDED_URL;
    }

    function getOpenTileURL(x, y, z) {
        if (type == "m")
            if (offset)
                return NOT_PROVIDED_URL;
            else
                return "http://a.tile.openstreetmap.org/" + z + "/" + x + "/" + y + ".png";
        else if (type == "t")
            if (offset)
                return NOT_PROVIDED_URL;
            else
                return "http://a.tile.opencyclemap.org/cycle/" + z + "/" + x + "/" + y + ".png";
        else
            return NOT_PROVIDED_URL;
    }
}

function initOnline() {
    document.body.ononline = onOnline;  // TODO: 有可能覆盖别人绑定的事件，用addEventListener代替
    document.body.onoffline = onOffline;
}
document.addEventListener("DOMContentLoaded", initOnline);

function onOnline() {
    tileGetter.isOnline = true;
    //alert("联网了。");
}

function onOffline() {
    tileGetter.isOnline = false;
    //alert("断网了！");
}