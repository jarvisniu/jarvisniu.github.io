/**********************************************************
 * Geometry Math Calculations
 * Author: BJ Niu
 *
 * ======== change log ========
 *
 * 1.1 - 2014/02/19
 *     - pow2d2 in y2lat();
 *
 * 1.2 - 2014/10/08
 *     - add cutEndedZero(string)
 *     - add r1() to r5()
 **********************************************************
 */
var D2R = Math.PI / 180;
var R2D = 180.0 / Math.PI;
var PI2 = Math.PI / 2;
var PI4 = Math.PI / 4;
var PI360 = Math.PI / 360;
var PIInv = 1 / Math.PI;

var pow2 = [];
for (var i = 0; i < 30; i++) {
    pow2[i] = Math.pow(2, i);
}
var pow2d2 = [];
for (i = 0; i < 30; i++) {
    pow2d2[i] = 2 / pow2[i];
}

// degree & radius
function degToRad(degree) {
    return degree * D2R;
}

function radToDeg(radius) {
    return radius * R2D;
}

// lat lng & gx gy
function lng2x(lat, level) {
    return (lat + 180) / 360 * pow2[level];
}

function lat2y(lng, level) {
    var per = 0.5 - 0.5 * Math.log(Math.tan(PI4 + lng * PI360 )) * PIInv;
    return per * pow2[level];
}

function x2lng(x, level) {
    return x * 360 / pow2[level] - 180;
}

function y2lat(y, level) {
    return (2 * Math.atan(Math.exp((1 - y * pow2d2[level]) * Math.PI)) - PI2) * R2D;
}

//lat lng & meter
// 1 deg = 100km
/**
 * Coordinates converter, between Local(Distance) and LatLon
 * @param lng
 * @returns {number}
 */
function lng2mx(lng) {
    return lng * 100000;
}
function lat2my(lat) {
    return lat * 100000;
}
function mx2lng(mx) {
    return mx / 100000;
}
function my2lat(my) {
    return my / 100000;
}

/**
 * Get the tile index of a geography coordinate.
 *
 * @param latLon {object} Object that contains the lon and lat attributes.
 * @param level {int} The destination zoom level.
 */
function getTileIndexFromLonLat(latLon, level) {
    var indexObj = {};
    indexObj.deciX = lng2x(latLon.lon, level);
    indexObj.deciY = lat2y(latLon.lat, level);
    indexObj.x = Math.floor(indexObj.deciX);
    indexObj.y = Math.floor(indexObj.deciY);
    indexObj.fracX = indexObj.deciX - indexObj.x;
    indexObj.fracY = indexObj.deciY - indexObj.y;
    return indexObj;
}

// Math

function r(original) {
    return Math.round(original);
}
function r1(original) {
    return Math.round(parseFloat(original) * 10) / 10;
}
function r2(original) {
    return Math.round(parseFloat(original) * 100) / 100;
}
function r3(original) {
    return Math.round(parseFloat(original) * 1000) / 1000;
}
function r4(original) {
    return Math.round(parseFloat(original) * 10000) / 10000;
}
function r5(original) {
    return Math.round(parseFloat(original) * 100000) / 100000;
}

// Utils
function cutEndedZero(string) {
    var indexLastNotZero = -1;
    for (var i = string.length - 1; i >= 0; i--) {
        if(string.substring(i, i+1)!="0"){
            indexLastNotZero = i;
            break;
        }
    }
    var num = string.substring(0, indexLastNotZero+1);
    if(num.substring(num.length-1,num.length)==".")num += "0";
    return num;
}

function getSign(num) {
    if(num > 0) {
        return 1;
    } else if(num < 0) {
        return -1;
    } else {
        return 0;
    }
}
// get the decimal part of a float number
function getDecimal(f) {
    return f - parseInt(f);
}