/**
 * module name: task scheduler
 * 名称：任务调度器
 * author: Jarvis Niu
 * Destination: Reduce the sluggish feeling result from consecutively execute of time-consuming tasks.
 * 目的：降低由于耗时任务的集中执行（UI线程遭到阻塞）而导致的的不流畅性（卡）。
 * This module is used to save time-consuming tasks(functions) and execute them periodically rather then together.
 * 应对策略：把集中执行的任务分散执行，也就是暂时储存耗时的任务（函数）然后依次间歇执行。
 *
 * =========== Change Log ===========
 *
 * v1.0 - 2014/09/20
 *      - first release
 *
 * v1.1 - 2014/09/24
 *      - addJob() -> addTask()
 *
 * v1.2 - 2014/09/29
 *      - add set attribute task type.
 *
 * v1.3.0 - 2014/10/09
 *      - rename from RoutineManager to TaskScheduler
 *      - obey semver
 *      - add eval-typed task
 *
 * plan
 *      - allow addTask(func, arg1, arg2, ...)
 *      - add Task()
 *      - add Task().continueWith()
 *      - add Task().setPriority()
 *
 * @constructor
 */

function TaskScheduler() {
    // task types
    this.EVAL = 0;
    this.FUNCTION = 1;
    this.ATTRIBUTE = 2;

    var that = this;
    var taskQuery = [];
    var frameInterval = 16; // default FPS is about 60

    /**
     * Add a task(a function and its arguments).
     * @param {string | function | object} arg1 - Token.
     */
    this.addTask = function(arg1) {
        if (typeof arg1 == "string") {
            taskQuery.push( {
                type: this.EVAL,
                code: arg1
            } );
        } else if (typeof arg1 == "function") {
            var func = arg1;
            var argus = arguments[1];

            if (!(argus instanceof Array)) argus = [ argus ];
            taskQuery.push( {
                type: this.FUNCTION,
                func: func,
                argus: argus
            } );
        } else if(typeof arg1 == "object") {
            var object = arg1;
            var attribution = arguments[1];
            var value = arguments[2];

            taskQuery.push( {
                type: this.ATTRIBUTE,
                object: object,
                attribution: attribution,
                value: value
            } );
        }
    };

    /**
     * Set the frequency of task execution.
     * @param fps How many tasks will be execute in a second.
     */
    this.setFPS = function(fps) {
        frameInterval = 1000 / fps;
    };

    function tick() {

        // execute the task
        if (taskQuery.length > 0) doTask(taskQuery.shift());

        // loop
        setTimeout(tick, frameInterval);
    }

    function doTask(task) {
        switch ( task.type ) {
            case that.EVAL:
                eval(task.code);
                break;
            case that.FUNCTION:
                task.func.apply(null, task.argus);
                break;
            case that.ATTRIBUTE:
                var object = task.object;
                var attribution = task.attribution;
                var value = task.value;
                object[attribution] = value;
                break;
            default :

        }
    }

    tick();
}