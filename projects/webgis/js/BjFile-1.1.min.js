/*
 * File and path operate functions.
 * author: Jarvis Niu
 *
 * =========== Change Log ===========
 *
 * v1.0 - 2014/01/19
 *      - first release
 *
 * v1.1 - 2014/09/28
 *      - readTextFile() => loadUrl()
 *      - loadAsyncTextFile() => loadUrlAsync()
 *
 * plan
 *      -
 */

/**
 * Load sync php data or file data.
 * @param url - The plain text or php file url .
 */
function loadUrl(url) {
	var xhr = new XMLHttpRequest();
	xhr.open("GET", url, false);
	xhr.send(null);
	return xhr.responseText;
}

/**
 * Load async php data or file data.
 * @param url - The file url or php interface.
 * @param callback - The callback function.
 * @param argus - The appended (after url) arguments of the callback function.
 */
function loadUrlAsync(url, callback, argus) {
    if (!(argus instanceof Array)) argus = [ argus ];
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function()
    {
        if (xhr.readyState == 4 && xhr.status == 200)
        {
            argus.unshift(xhr.responseText);
            callback.apply(null, argus);
        }
    };
    xhr.open("GET", url, true);
    xhr.send(null);
}

/**
 * Extract the path of a fileName.
 * e.g. http://job.cnbeta.com/jobs/121164.html => http://job.cnbeta.com/jobs/
 * @param fileName
 * @returns {string} - extracted file path
 */
function getFilePath(fileName) {
	var indexOfLastSlash = fileName.lastIndexOf("/");
	return fileName.substring(0, indexOfLastSlash + 1);
}

/**
 * Detect whether a file is exits on the server.
 * @param url
 * @returns {boolean}
 */
function isFileExists(url) {
    var xhr = new XMLHttpRequest();
    xhr.open("HEAD", url, false);
    xhr.send(null);
    return (xhr.status != 404);
}

/**
 * Generate a random string contains [a-z|A-Z|0-9].
 * @returns {string}
 */
function getRndWord() {
    var charNum = Math.floor(Math.random() * 10) + 5;
    var str = "";
    for(var i = 0; i < charNum; i++) {
        str += String.fromCharCode(65 + Math.floor(Math.random() * 58));
    }
    return str;
}