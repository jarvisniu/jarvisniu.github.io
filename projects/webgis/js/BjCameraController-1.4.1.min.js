/******************************************************************************
 * Mouse & Keyboard event handler
 * Author: BJ Niu
 * Date: 2014/2/12
 * New:
 * 1. keyboard control camera
 *
 * Issue:
 * 1.The id of canvas element must be "canvas" in addEvents()
 * 2.pMatrix.Z -> pMatrixInfo.PanZ
 * 3.pMatrixRotate
 * 4.handleMouseUp() -> arrangeTiles();
 * *****************************************************************************
 */


// Mouse
var isMouseDown = false;
var mouseDownAt = {};
var mouseDownButton = -1;
var isMouseWheelCD = false;
var lastTouchPos = { x: 0, y: 0 };

// Keyboard
var currentPressedKeys = {}; // 现在按下的按键

// Debug
var isShowKeyCode = false;  // Show key code in title

function addEvents() {
    document.onkeydown = handleKeyDown;
    document.onkeyup = handleKeyUp;
    document.getElementById("canvas").onmousedown = handleMouseDown;
    document.onmousemove = handleMouseMove;     // 为了使鼠标拖动时路过指南针或控制面板时不停止，因此放在document上
    document.getElementById("canvas").onmouseup = handleMouseUp;
    document.getElementById("canvas").onmousewheel = handleMouseWheel;
    document.getElementById("canvas").addEventListener("touchstart", handleTouchStart);
    document.getElementById("canvas").addEventListener("touchmove", handleTouchMove);
    document.getElementById("canvas").addEventListener("touchend", handleTouchEnd);
}

/**
 * keyboard events
 * keyCode: Up-38, Left-37, Right-39, Down-40
 *          W-87, A-65, S-83, D-68
 */
function handleKeyDown(e) {
    currentPressedKeys[e.keyCode] = true;
    if (isShowKeyCode) document.title = "KeyPressed: " + e.keyCode;
}
function handleKeyUp(e) {
    currentPressedKeys[e.keyCode] = false;
}
function handleKeys() {
    if (currentPressedKeys[37]) { // Left
        onPan(-10, 0);
        needRender = true;
    }
    if (currentPressedKeys[39]) { // Right
        onPan(10, 0);
        needRender = true;
    }

    if (currentPressedKeys[38]) { // Up
        onPan(0, -10);
        needRender = true;
    }
    if (currentPressedKeys[40]) { // Down
        onPan(0, 10);
        needRender = true;
    }
    if (currentPressedKeys[87]) { // W
        onRotate(0, -10);
        needRender = true;
    }
    if (currentPressedKeys[83]) { // S
        onRotate(0, 10);
        needRender = true;
    }
    if (currentPressedKeys[65]) { // A
        onRotate(-10, 0);
        needRender = true;
    }
    if (currentPressedKeys[68]) { // D
        onRotate(10, 0);
        needRender = true;
    }
    if(currentPressedKeys[33]) { //Page Up
        //z -= 0.01;
    }
    if(currentPressedKeys[34]) { //Page Down
        //z += 0.01;
    }
}
function showKeyCode() {
    isShowKeyCode = true;
}
function hideKeyCode() {
    isShowKeyCode = false;
}

// mouse events
function handleMouseDown(e) {
    isMouseDown = true;
    mouseDownButton = e.button;

    mouseDownAt.X = e.clientX;
    mouseDownAt.Y = e.clientY;
}
function handleMouseMove(e) {
    if(isMouseDown) {
        needRender = true;
        var dx = mouseDownAt.X - e.clientX;
        var dy = mouseDownAt.Y - e.clientY;
        if (mouseDownButton == 0) {  //左键
            onPan(dx, dy);
        } else if(mouseDownButton == 1) {  //中键
            onZoom(dy);
            onRotate(dx, 0);
        } else if(mouseDownButton == 2) {  //右键
            onRotate(dx, dy);
        }
        mouseDownAt.X = e.clientX;
        mouseDownAt.Y = e.clientY;
        if ("setElevation" in window) setElevation();             // 此处需要提前将mouseDownAt值修改，因为这里在项目区域外会有漂移现象发生
        if ("updateElevation" in window) updateElevation();             // 此处需要提前将mouseDownAt值修改，因为这里在项目区域外会有漂移现象发生
        if ("updateCamera" in window) updateCamera();
        if ("UpdateNavigator" in window) UpdateNavigator(pMatrixInfo.RotateX, pMatrixInfo.RotateZ);
    }
}
function handleMouseUp(e) {
    if(mouseDownButton == 0) {
        arrangeTiles();
    }
    isMouseDown = false;
    mouseDownButton = -1;
    needRender = true;
}
function handleMouseWheel(e) {
    if (!isMouseWheelCD) {
        onZoom(e.wheelDelta / 3);
        if ("setElevation" in window) setElevation();             // 此处需要提前将mouseDownAt值修改，因为这里在项目区域外会有漂移现象发生
        if ("updateElevation" in window) updateElevation();             // 此处需要提前将mouseDownAt值修改，因为这里在项目区域外会有漂移现象发生
        if ("updateCamera" in window) updateCamera();
        isMouseWheelCD = true;
        setTimeout("isMouseWheelCD = false;", 75);
    }
}
function handleTouchStart(e) {
    e.preventDefault();
    if (e.touches.length == 1) {

        lastTouchPos.x = e.touches[0].clientX;
        lastTouchPos.y = e.touches[0].clientY;
    }
}
function handleTouchMove(e) {
    e.preventDefault();
    if (e.touches.length == 1) {

        var dx = lastTouchPos.x - e.touches[0].clientX;
        var dy =  lastTouchPos.y - e.touches[0].clientY;
        onPan(dx, dy);

        lastTouchPos.x = e.touches[0].clientX;
        lastTouchPos.y = e.touches[0].clientY;
        needRender = true;
    }
}
function handleTouchEnd(e) {
}

function onPan(dx, dy) {
    var deltaPrevX = dx * pMatrixInfo.PanZ / 900;
    var deltaPrevY = dy * pMatrixInfo.PanZ / 900;
    pivot.X -= deltaPrevX * Math.cos(degToRad(pMatrixInfo.RotateZ)) - deltaPrevY * Math.sin(degToRad(pMatrixInfo.RotateZ));
    pivot.Y += deltaPrevX * Math.sin(degToRad(pMatrixInfo.RotateZ)) + deltaPrevY * Math.cos(degToRad(pMatrixInfo.RotateZ));

    if ("setElevation" in window) setElevation();             // 此处需要提前将mouseDownAt值修改，因为这里在项目区域外会有漂移现象发生
    if ("updateElevation" in window) updateElevation();
    if ("updateOriginPos" in window) updateOriginPos();
}

function onRotate(dx, dy) {
    pMatrixInfo.RotateZ -= dx/ 5;
    pMatrixInfo.RotateX -= dy / 5;
    if (pMatrixInfo.RotateX > 0) pMatrixInfo.RotateX = 0;
    if (pMatrixInfo.RotateX < -90) pMatrixInfo.RotateX = -90;
    if ("SyncCompass" in window) SyncCompass(pMatrixInfo.RotateX, pMatrixInfo.RotateZ);
}

function onZoom(dy) {
    pMatrixInfo.PanZ /= Math.exp(dy / 100);
    if ("onZoomArrange" in window) onZoomArrange();
    if ("updateOriginPos" in window) updateOriginPos();   // 放大以后可能会显示的
}

function onZoomScale(scale) {
    pMatrixInfo.PanZ /= scale;
    if ("onZoomArrange" in window) onZoomArrange();
    if ("updateOriginPos" in window) updateOriginPos();   // 放大以后可能会显示的
}