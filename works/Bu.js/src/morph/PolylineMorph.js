// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Bu.PolylineMorph = (function() {
  function PolylineMorph(polylineA, polylineB) {
    this.polylineA = polylineA;
    this.polylineB = polylineB;
    this.update = bind(this.update, this);
    this.type = "PolylineMorph";
    this.polyline = new Bu.Polyline();
    this.hPointsA = [];
    this.hPointsB = [];
    this.update();
  }

  PolylineMorph.prototype.setTime = function(time) {
    var i, j, ref, results;
    results = [];
    for (i = j = 0, ref = this.hPointsA.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      results.push(Bu.Point.interpolate(this.hPointsA[i], this.hPointsB[i], time, this.polyline.points[i]));
    }
    return results;
  };

  PolylineMorph.prototype.update = function() {
    var i, indexA, indexB, j, pointsA, pointsB, posA, posAPrev, posB, posBPrev, ref, secPosA, secPosB;
    this.hPointsA.clear();
    this.hPointsB.clear();
    pointsA = this.polylineA.points;
    pointsB = this.polylineB.points;
    indexA = 0;
    indexB = 0;
    while (indexA < pointsA.length && indexB < pointsB.length) {
      posA = this.polylineA.getNormalizedPos(indexA);
      posB = this.polylineB.getNormalizedPos(indexB);
      posAPrev = this.polylineA.getNormalizedPos(indexA - 1);
      posBPrev = this.polylineB.getNormalizedPos(indexB - 1);
      if (posA < posB) {
        secPosB = (posA - posBPrev) / (posB - posBPrev);
        this.hPointsA.push(pointsA[indexA]);
        this.hPointsB.push(Bu.Point.interpolate(pointsB[indexB - 1], pointsB[indexB], secPosB));
        indexA += 1;
      } else if (posA > posB) {
        secPosA = (posB - posAPrev) / (posA - posAPrev);
        this.hPointsA.push(Bu.Point.interpolate(pointsA[indexA - 1], pointsA[indexA], secPosA));
        this.hPointsB.push(pointsB[indexB]);
        indexB += 1;
      } else {
        this.hPointsA.push(pointsA[indexA]);
        this.hPointsB.push(pointsB[indexB]);
        indexA += 1;
        indexB += 1;
      }
    }
    for (i = j = 0, ref = this.hPointsA.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (this.polyline.points[i] != null) {
        this.polyline.points[i].set(this.hPointsA[i].x, this.hPointsA[i].y);
      } else {
        this.polyline.points[i] = new Bu.Point(this.hPointsA[i].x, this.hPointsA[i].y);
      }
    }
    if (this.polyline.points.length < this.hPointsA.length) {
      return this.polyline.points.splice(this.hPointsA.length);
    }
  };

  return PolylineMorph;

})();

//# sourceMappingURL=PolylineMorph.js.map
