// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Bu.DrawCircleReactor = (function(superClass) {
  extend(DrawCircleReactor, superClass);

  function DrawCircleReactor(renderer) {
    var circle, line, mouseButton, mousePos, mousePosDown, self;
    this.renderer = renderer;
    DrawCircleReactor.__super__.constructor.call(this);
    self = this;
    mouseButton = Bu.MOUSE_BUTTON_NONE;
    mousePos = new Bu.Point;
    mousePosDown = new Bu.Point;
    circle = null;
    line = null;
    this.onMouseDown = function(e) {
      mousePosDown.set(e.offsetX, e.offsetY);
      circle = new Bu.Circle(mousePosDown.x, mousePosDown.y, 1);
      self.renderer.append(circle);
      line = new Bu.Line(mousePosDown, mousePosDown);
      line.stroke("#f44");
      self.renderer.append(line);
      return mouseButton = e.button;
    };
    this.onMouseMove = function(e) {
      if (mouseButton === Bu.MOUSE_BUTTON_LEFT) {
        mousePos.set(e.offsetX, e.offsetY);
        circle.radius = mousePos.distanceTo(mousePosDown);
        return line.setPoint1(mousePos);
      }
    };
    this.onMouseUp = function() {
      return mouseButton = Bu.MOUSE_BUTTON_NONE;
    };
  }

  return DrawCircleReactor;

})(Bu.ReactorBase);

//# sourceMappingURL=DrawCircleReactor.js.map
