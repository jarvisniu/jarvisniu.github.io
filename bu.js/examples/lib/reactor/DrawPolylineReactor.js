// Generated by CoffeeScript 2.1.0
(function() {
  // left click to add point to polyline
  // right click to finish the current polyline
  Bu.DrawPolylineReactor = class DrawPolylineReactor extends Bu.ReactorBase {
    constructor(bu) {
      var line, mouseDownPos, mousePos, polyline;
      super();
      this.bu = bu;
      mousePos = new Bu.Point;
      mouseDownPos = new Bu.Vector;
      polyline = null;
      line = null;
      this.onMouseDown = (ev) => {
        mouseDownPos.set(ev.offsetX, ev.offsetY);
        if (ev.buttons === Bu.MOUSE.LEFT) {
          if (polyline == null) {
            polyline = new Bu.Polyline;
            polyline.style('selected');
            this.bu.scene.addChild(polyline);
          }
          if (line == null) {
            line = new Bu.Line(mousePos, mousePos);
            line.style('dash');
            this.bu.scene.addChild(line);
          } else if (line.visible === false) {
            line.setPoint1(mousePos);
            line.setPoint2(mousePos);
            line.visible = true;
          }
          line.setPoint1(line.points[1]);
          return polyline.addPoint(mousePos.clone());
        } else if (ev.buttons === Bu.MOUSE.RIGHT) {
          polyline.style();
          polyline = null;
          return line.visible = false;
        }
      };
      this.onMouseMove = (ev) => {
        mousePos.set(ev.offsetX, ev.offsetY);
        if (polyline != null) {
          return line.setPoint2(mousePos);
        }
      };
      this.onMouseUp = () => {
        var len, points;
        if (polyline != null) {
          line.setPoint2(line.points[0]);
          line.setPoint1(mousePos);
          points = polyline.vertices;
          len = mousePos.distanceTo(points[points.length - 1]);
          if (len > Bu.POINT_RENDER_SIZE) {
            return polyline.addPoint(mousePos.clone());
          }
        }
      };
    }

  };

}).call(this);
