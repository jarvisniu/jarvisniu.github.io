// Generated by CoffeeScript 2.1.0
(function() {
  // left click to add point to polygon
  // right click to finish the current polygon
  Bu.DrawPolygonReactor = class DrawPolygonReactor extends Bu.ReactorBase {
    constructor(bu) {
      var guideLineEnd, guideLineStart, mouseDownPos, mousePos, polygon;
      super();
      this.bu = bu;
      mousePos = new Bu.Point;
      mouseDownPos = new Bu.Vector;
      polygon = null;
      guideLineEnd = null;
      guideLineStart = null;
      this.onMouseDown = (ev) => {
        mouseDownPos.set(ev.offsetX, ev.offsetY);
        if (ev.buttons === Bu.MOUSE.LEFT) {
          if (polygon == null) {
            polygon = new Bu.Polygon;
            polygon.style('selcted');
            this.bu.scene.addChild(polygon);
          }
          if (guideLineEnd == null) {
            guideLineEnd = new Bu.Line(mousePos, mousePos);
            guideLineEnd.style('dash');
            this.bu.scene.addChild(guideLineEnd);
            guideLineStart = new Bu.Line(mousePos, mousePos);
            guideLineStart.style('dash');
            this.bu.scene.addChild(guideLineStart);
          } else if (guideLineEnd.visible === false) {
            guideLineEnd.setPoint1(mousePos);
            guideLineEnd.setPoint2(mousePos);
            guideLineEnd.visible = true;
            guideLineStart.setPoint1(mousePos);
            guideLineStart.setPoint2(mousePos);
            guideLineStart.visible = true;
          }
          guideLineEnd.setPoint1(guideLineEnd.points[1]);
          return polygon.addPoint(mousePos.clone());
        } else if (ev.buttons === Bu.MOUSE.RIGHT) {
          polygon.style();
          polygon = null;
          guideLineEnd.visible = false;
          return guideLineStart.visible = false;
        }
      };
      this.onMouseMove = (ev) => {
        var points;
        mousePos.set(ev.offsetX, ev.offsetY);
        if (ev.buttons === Bu.MOUSE.LEFT) {
          points = polygon.vertices;
        //				points[points.length - 1].set mousePos.x, mousePos.y
        } else if (ev.buttons === Bu.MOUSE.NONE && (polygon != null)) {
          if (polygon.containsPoint(mousePos)) {
            polygon.fill('hover');
          } else {
            polygon.fill('selected');
          }
        }
        if (polygon) {
          guideLineEnd.setPoint2(mousePos);
          return guideLineStart.setPoint2(mousePos);
        }
      };
      this.onMouseUp = (ev) => {
        var len, points;
        if (polygon != null) {
          guideLineEnd.setPoint2(guideLineEnd.points[0]);
          guideLineEnd.setPoint1(mousePos);
          points = polygon.vertices;
          len = mousePos.distanceTo(points[points.length - 1]);
          if (len > Bu.POINT_RENDER_SIZE) {
            return polygon.addPoint(mousePos.clone());
          }
        }
      };
    }

  };

}).call(this);
